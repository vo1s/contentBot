from aiocryptopay import AioCryptoPay, Networks
from aiogram import Router, types, F
from aiogram.enums import ParseMode

from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.types import Message, CallbackQuery

from db import get_user_by_id, get_users_collection, add_user_data
from handlers.earn_handler import earn

from keyboards.main_keyboard import *
import re

from keyboards.payment_keyboard import payment_keyboard, payment_keyboard_subscription

router = Router()

users_collection = get_users_collection()
admins = list(map(int, config.admins.get_secret_value().split(',')))


@router.message(CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'^\d+$'))))
async def cmd_start_user(message: Message, command: CommandObject, user_id: int = None, username: str = None):
    if user_id is None:
        user_id = message.from_user.id
    if username is None:
        username = message.from_user.username

    args_id = int(command.args)
    # –î–∞–µ–º –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
    user = await get_user_by_id(args_id)
    referall = await get_user_by_id(user_id)
    if user and (referall is None):
        count_user_refs = user['reff_info']["refs"]
        balance = user["balance"]
        ref_bonus = user['reff_info']["refs_bonus"]
        await users_collection.update_one(
            {"_id": user["_id"]},
            {"$set": {
                "reff_info.refs": int(count_user_refs) + 1,
                "balance": int(balance) + 10,
                "reff_info.refs_bonus": int(ref_bonus) + 10
            }},
        )
        await add_user_data(user_id, username)
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –∫ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª—É
        new_user = await get_user_by_id(user_id)
        await users_collection.update_one(
            {"_id": new_user["_id"]},
            {"$set": {
                "reff_info.reff_id": user["_id"]
            }}
        )
        is_admin = message.from_user.id in admins
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_keyboard(is_admin))
    else:
        is_admin = message.from_user.id in admins
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_keyboard(is_admin))


@router.message(CommandStart())
async def command_start_handler(message: types.Message, user_id: int = None, username: str = None) -> None:
    if user_id is None:
        user_id = message.from_user.id
    if username is None:
        username = message.from_user.username

    await add_user_data(user_id, username)
    is_admin = message.from_user.id in admins
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_keyboard(is_admin))


@router.message(Command("menu"))
async def cmd_test1(message: types.Message):
    is_admin = message.from_user.id in admins
    await message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard(is_admin))


@router.callback_query(F.data.startswith('check_subscription'))
async def check_subscription(callback_query: CallbackQuery):
    user_id = int(callback_query.data.split(':')[2])
    username = callback_query.data.split(':')[3]
    is_premium = callback_query.from_user.is_premium

    chat_member = await callback_query.bot.get_chat_member(config.channel_name.get_secret_value(), user_id)

    if chat_member.status != "left":
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        await callback_query.message.delete()
        original_command = callback_query.data.split(':', 1)[1]
        print(original_command)
        bot_name = config.bot_name.get_secret_value()
        if original_command.startswith(f'/start?'):
            command_args = original_command.split('?', 1)[1].split(':')[0]
            fake_command = CommandObject(args=command_args, command='start')
            await cmd_start_user(callback_query.message, fake_command, user_id, username)
        else:
            await command_start_handler(callback_query.message, user_id, username)
    else:
        await callback_query.answer(
            "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )


@router.callback_query(F.data == 'invite_friends')
async def choose(call: CallbackQuery):
    await earn(call.message)
    await call.answer()


@router.message(F.text == "üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    is_admin = message.from_user.id in admins
    await message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard(is_admin))


async def notify_no_tokens(message):
    content = """
‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üíé Tokens, –∂–º–∏
üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å Tokens –∏–ª–∏ üíé –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å (–≤ –ø—Ä–æ—Ñ–∏–ª–µ)

‚öúÔ∏è Premium –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
*(0 üíé Tokens –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä)*

üë´ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –ø–æ 10 üíé Tokens (15 RUB) –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!</b>
    """
    await message.delete()
    await message.answer(text=content, parse_mode=ParseMode.HTML, reply_markup=no_money_keyboard())


@router.message(F.text == "üîí –ü–æ–¥–ø–∏—Å–∫–∞")
async def subscribe_menu(message: types.Message):
    content = f"""
‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï –ê–ö–¶–ò–Ø ‚ùóÔ∏è
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ–≥–æ: 299 —Ä—É–±–ª–µ–π(–≤–º–µ—Å—Ç–æ 599 RUB)

‚öúÔ∏è Premium –ø–æ–¥–ø–∏—Å–∫–∞:
- –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø (0 üíé Tokens –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä)
- —Å–∞–º—ã–π –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∏ –∂–∞—Ä–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç üîû
- –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (12% –∏ 3%)
‚öúÔ∏è Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞
(–µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–∞–Ω—è—Ç, –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–æ–≤–æ–º) üîû


‚ö°Ô∏è –ü–æ–∫—É–ø–∞–π —Å–µ–π—á–∞—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è üí¶
üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã üëá
    """
    user = await get_user_by_id(message.chat.id)
    subs_status = user['subscription_status']
    if subs_status == 'free':
        await message.answer(content, reply_markup=payment_keyboard_subscription(299))
    else:
        await message.answer('–£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞! –°–ø–∞—Å–∏–±–æ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!')
