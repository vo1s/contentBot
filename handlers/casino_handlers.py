import asyncio

from aiogram import Router, types, F, Bot
from aiogram.enums import DiceEmoji
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from db import manage_balance, get_user_by_id
from keyboards.casino_keyboards import *
from states import Casino

router = Router()


@router.message(F.text == "üé∞ –ö–∞–∑–∏–Ω–æ")
async def earn(message: types.Message):
    content = f"""
üé∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∏–≥—Ä—É:</b>
<i>–ò–≥—Ä–∞–π—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫, –≤–µ–¥—å —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –≤—ã–∏–≥—Ä–∞—Ç—å
–≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–ª—è —Ä–∏—Å–∫–æ–≤—ã—Ö –∏ –ø–æ–¥–∫—Ä—É—Ç–∏—Ç—å —Ç—É—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</i>
    """
    await message.answer(content, parse_mode="html", reply_markup=casino_keyboard())


@router.callback_query(F.data == 'back_casino')
async def choose(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await earn(call.message)
    await call.answer()


@router.callback_query(F.data.startswith("casino_choose"))
async def choose(call: CallbackQuery, state: FSMContext):
    game = call.data.split(":")[1]
    user = await get_user_by_id(call.from_user.id)
    await state.clear()
    if game == "dice":

        content = f"""
üé≤ –ö—É–±–∏–∫
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É–≥–∞–¥–∞—Ç—å, –∫–∞–∫–æ–µ –∏–∑ 6 —á–∏—Å–µ–ª –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫—É–±–∏–∫–µ.

–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} üíé Gems
–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:
            """
        await call.message.answer(content)
        await state.set_state(Casino.bet)
    elif game == "darts":

        content = f"""
üéØ –î–∞—Ä—Ç—Å
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ–ø–∞—Å—Ç—å –≤ —è–±–ª–æ—á–∫–æ –Ω–∞ –º–∏—à–µ–Ω–∏. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è, –≤—ã —É–º–Ω–æ–∂–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –≤ 3 —Ä–∞–∑–∞.

–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} üíé Gems
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:
                    """
        await call.message.answer(content)
        await state.set_state(Casino.darts)
    elif game == "slots":

        content = f"""
üé∞ –°–ª–æ—Ç—ã

–¢–µ–∫—É—â–∏–µ –ø—Ä–∏–∑—ã:
7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ = x7 –æ—Ç —Å—Ç–∞–≤–∫–∏
üçáüçáüçá = x4 –æ—Ç —Å—Ç–∞–≤–∫–∏
üçãüçãüçã = x3 –æ—Ç —Å—Ç–∞–≤–∫–∏
üíÄüíÄüíÄ = x2 –æ—Ç —Å—Ç–∞–≤–∫–∏

–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–∏—à–∏—Ç –≤–∞—Å —Å—Ç–∞–≤–∫–∏

–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} üíé Gems
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:
                            """
        await call.message.answer(content)
        await state.set_state(Casino.slots)
    else:
        content = f"""
        üé≥ –ë–æ—É–ª–∏–Ω–≥
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å–±–∏—Ç—å –≤—Å–µ –∫–µ–≥–ª–∏. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è, –≤—ã —É–º–Ω–æ–∂–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –≤ 3 —Ä–∞–∑–∞.

–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} üíé Gems
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:
                                    """
        await call.message.answer(content)
        await state.set_state(Casino.ball)


@router.message(Casino.bet, F.text)
async def dice(message: types.Message, state: FSMContext, bot: Bot):
    try:
        number = int(message.text)
        if 1 <= number <= 6:
            await state.update_data(guess=number)
            user = await get_user_by_id(message.from_user.id)
            content = f"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>3 üíé –ì–µ–º–∞</b>
–í–∞—à –ë–∞–ª–∞–Ω—Å: <b>{user['balance']}</b>

<i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É</i>
            """
            await message.answer(content, parse_mode="html", reply_markup=back_casino_keyboard())
            await state.set_state(Casino.dice)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.", reply_markup=back_casino_keyboard())
    except ValueError:
        await message.answer("<b>‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑.</b>", parse_mode="html",
                             reply_markup=back_casino_keyboard())


@router.message(Casino.bet, ~F.text)
async def not_text(message: types.Message, state: FSMContext, bot: Bot):
    await message.answer("<b>‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑.</b>", parse_mode="html",
                         reply_markup=back_casino_keyboard())


@router.message(Casino.dice, F.text)
async def dice(message: types.Message, state: FSMContext, bot: Bot):
    try:
        bet = int(message.text)
        user = await get_user_by_id(message.from_user.id)
        if bet < 3:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ - <b>3 üíé –ì–µ–º–∞!</b>", parse_mode="html",
                                 reply_markup=back_casino_keyboard())
        elif bet > user['balance']:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - <b>{user['balance']} üíé –ì–µ–º–∞!</b>",
                                 parse_mode="html", reply_markup=back_casino_keyboard())
        else:
            data = await state.get_data()
            new_balance = await manage_balance(message.from_user.id, bet, 'subtract')

            msg = await message.answer_dice(emoji=DiceEmoji.DICE)
            await asyncio.sleep(3)

            if int(data['guess']) == msg.dice.value:  # –ï—Å–ª–∏ –∫—É–±–∏–∫ —Å–æ–≤–ø–∞–ª —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                new_balance = await manage_balance(message.from_user.id, bet * 2, 'add')
                await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–º, –≤–∞—à–µ —á–∏—Å–ª–æ —Å–æ–≤–ø–∞–ª–æ —Å –∫—É–±–∏–∫–æ–º, –±–∞–ª–∞–Ω—Å <b>{new_balance}</b>",
                                     parse_mode="html", reply_markup=back_casino_keyboard())
            else:  # –µ—Å–ª–∏ –∫—É–±–∏–∫ –Ω–µ —Å–æ–≤–ø–∞–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ :( –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!",
                                     reply_markup=back_casino_keyboard())
            await state.clear()
    except ValueError:
        await message.answer("<b>‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>", parse_mode="html",
                             reply_markup=back_casino_keyboard())


@router.message(Casino.darts, F.text)
async def dice(message: types.Message, state: FSMContext):
    try:
        bet = int(message.text)
        user = await get_user_by_id(message.from_user.id)
        if bet < 3:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ - <b>3 üíé –ì–µ–º–∞!</b>", parse_mode="html",
                                 reply_markup=back_casino_keyboard())
        elif bet > user['balance']:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - <b>{user['balance']} üíé –ì–µ–º–∞!</b>",
                                 parse_mode="html", reply_markup=back_casino_keyboard())
        else:
            data = await state.get_data()
            new_balance = await manage_balance(message.from_user.id, bet, 'subtract')

            msg = await message.answer_dice(emoji=DiceEmoji.DART)
            await asyncio.sleep(2)
            if msg.dice.value == 6:  # –ï—Å–ª–∏ –±—Ä–æ—Å–æ–∫ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–æ–≤–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä
                new_balance = await manage_balance(message.from_user.id, bet * 4, 'add')
                await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–º, –≤—ã –ø–æ–ø–∞–ª–∏ —Ä–æ–≤–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä! –ë–∞–ª–∞–Ω—Å <b>{new_balance}</b>",
                                     parse_mode="html", reply_markup=back_casino_keyboard())
            else:  # –µ—Å–ª–∏ –Ω–µ –≤ —Ü–µ–Ω—Ç—Ä
                await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø–æ–ø–∞–ª–∏ :( –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!",
                                     reply_markup=back_casino_keyboard())
            await state.clear()
    except ValueError:
        await message.answer("<b>‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>", parse_mode="html",
                             reply_markup=back_casino_keyboard())


@router.message(Casino.slots)
async def dice(message: types.Message, state: FSMContext):
    try:
        bet = int(message.text)
        user = await get_user_by_id(message.from_user.id)
        if bet < 3:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ - <b>3 üíé –ì–µ–º–∞!</b>", parse_mode="html",
                                 reply_markup=back_casino_keyboard())
        elif bet > user['balance']:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - <b>{user['balance']} üíé –ì–µ–º–∞!</b>",
                                 parse_mode="html", reply_markup=back_casino_keyboard())
        else:
            data = await state.get_data()
            new_balance = await manage_balance(message.from_user.id, bet, 'subtract')

            msg = await message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
            await asyncio.sleep(2)
            rewards = {64: 8, 43: 4, 22: 5, 1: 3}
            if int(msg.dice.value) in rewards.keys():
                new_balance = await manage_balance(message.from_user.id, bet * rewards[int(msg.dice.value)], 'add')
                await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–º, –≤—ã –∑–∞–±—Ä–∞–ª–∏ –¥–∂–µ–∫–ø–æ—Ç! –ë–∞–ª–∞–Ω—Å <b>{new_balance}</b>",
                                     parse_mode="html", reply_markup=back_casino_keyboard())
            else:
                await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–≤–µ–∑–ª–æ :( –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!",
                                     reply_markup=back_casino_keyboard())
            await state.clear()
    except ValueError:
        await message.answer("<b>‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>", parse_mode="html",
                             reply_markup=back_casino_keyboard())


@router.message(Casino.ball)
async def dice(message: types.Message, state: FSMContext):
    try:
        bet = int(message.text)
        user = await get_user_by_id(message.from_user.id)
        if bet < 3:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ - <b>3 üíé –ì–µ–º–∞!</b>", parse_mode="html",
                                 reply_markup=back_casino_keyboard())
        elif bet > user['balance']:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - <b>{user['balance']} üíé –ì–µ–º–∞!</b>",
                                 parse_mode="html", reply_markup=back_casino_keyboard())
        else:
            data = await state.get_data()
            new_balance = await manage_balance(message.from_user.id, bet, 'subtract')

            msg = await message.answer_dice(emoji=DiceEmoji.BOWLING)
            await asyncio.sleep(2.5)

            if msg.dice.value == 6:  # –ï—Å–ª–∏ –±—Ä–æ—Å–æ–∫ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–æ–≤–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä
                new_balance = await manage_balance(message.from_user.id, bet * 4, 'add')
                await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–º, –≤—ã –≤—ã–±–∏–ª–∏ —Å—Ç—Ä–∞–π–∫! –ë–∞–ª–∞–Ω—Å <b>{new_balance}</b>",
                                     parse_mode="html", reply_markup=back_casino_keyboard())
            else:  # –µ—Å–ª–∏ –Ω–µ –≤ —Ü–µ–Ω—Ç—Ä
                await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å—É–º–µ–ª–∏ :( –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!",
                                     reply_markup=back_casino_keyboard())
            await state.clear()
    except ValueError:
        await message.answer("<b>‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>", parse_mode="html",
                             reply_markup=back_casino_keyboard())
