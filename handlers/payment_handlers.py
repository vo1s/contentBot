from aiogram import Router, F, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery

from api.crypto_bot_api import crypto_bot
from db import get_user_by_id, update_subscription_status, manage_balance
from handlers.common_handler import subscribe_menu
from keyboards.payment_keyboard import currencies, check_crypto_bot_payment_keyboard, payment_keyboard, stars_keyboard, \
    payment_keyboard_stars, stars_keyboard_subscription, contact_admin_keyboard
from states import Deposit

router = Router()


@router.callback_query(F.data.startswith('pay_crypto_keyboard'))
async def pay_crypto(call: CallbackQuery, bot: Bot):
    rub_amount = call.data.split(':')[1]
    await bot.edit_message_text(
        text='üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=currencies(int(rub_amount))
    )
    await call.answer()


# ---------------------- –û–ø–ª–∞—Ç–∞ CryptoBot

@router.callback_query(F.data.startswith('back_to_pay_menu'))
async def back_to_pay_menu(call: CallbackQuery, bot: Bot):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await subscribe_menu(call.message)
    await call.answer()


@router.callback_query(F.data.startswith('create_invoice_crypto'))
async def pay_crypto_check(call: CallbackQuery, bot: Bot):
    content = f"""
‚åõÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
(–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã)
    """
    currency = call.data.split(':')[1]
    rub_amount = call.data.split(':')[2]
    exchange_rates = await crypto_bot.get_exchange_rates()
    for rate in exchange_rates:
        if rate.source == currency and rate.target == 'RUB':
            crypto_sum = rate.rate
            invoice = await crypto_bot.create_invoice(asset=currency, amount=float(rub_amount) / crypto_sum)
            await bot.edit_message_text(
                text=content,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=check_crypto_bot_payment_keyboard(invoice.invoice_id, invoice.bot_invoice_url, rub_amount)
            )
    await call.answer()


@router.callback_query(F.data.startswith('check_crypto_bot_payment'))
async def check_crypto_bot_payment(call: CallbackQuery, bot: Bot):
    invoice_id = call.data.split(':')[1]
    rub_amount = call.data.split(':')[2]
    invoice = await crypto_bot.get_invoices(invoice_ids=[invoice_id])
    #print(rub_amount)
    if invoice[0].status == 'paid':
        if rub_amount == '299':
            await update_subscription_status(call.message.chat.id, 'paid')
            await bot.edit_message_text(
                text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,

            )
        else:
            new_balance = await manage_balance(call.message.chat.id, int(rub_amount)*2, 'add')
            await bot.edit_message_text(
                text=f"–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω! –ë–∞–ª–∞–Ω—Å - <b>{new_balance} üíé</b>",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
            )
    elif invoice[0].status == 'expired':
        await call.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π!", show_alert=True)
    else:
        await call.answer("–í–∞—à —Å—á–µ—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω! –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å", show_alert=True)
    await call.answer()


# ---------------------- –û–ø–ª–∞—Ç–∞ Stars
@router.callback_query(F.data.startswith('enter_money'))
async def enter_money(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    content = """
üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è   2 üíé Tokens = 1 RUB
üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 50 RUB
    """
    await state.set_state(Deposit.money_amount)

    await bot.edit_message_text(
        text=content,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )
    await call.answer()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–ø–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
@router.message(Deposit.money_amount, F.text.regexp(r'^[1-9]\d*$'))
async def pay_stars(message: types.Message, bot: Bot, state: FSMContext):
    money_amount = int(message.text)
    if money_amount < 50:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è <b>50 RUB</b>!")
    else:
        content = "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        await message.answer(content, reply_markup=payment_keyboard(money_amount))

        await state.clear()


@router.message(Deposit.money_amount)
async def pay_stars_wrong(message: types.Message, bot: Bot):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!")


# –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–≤–µ–∑–¥–∞–º–∏
@router.callback_query(F.data.startswith('pay_stars_subscription'))
async def pay_stars(call: CallbackQuery, bot: Bot):
    content = f"""
–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>Stars</b> ‚≠ê–ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
–ó–∞–¥–∞–Ω–Ω—É—é —Ç–µ–ª–µ–≥—Ä–∞–º–º–æ–º, –¥–∞–ª–µ–µ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—á–µ—Ç –±–æ—Ç–∞, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!
    """
    await bot.edit_message_text(
        text=content,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=stars_keyboard_subscription()
    )


# –æ–ø–ª–∞—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏
@router.callback_query(F.data.startswith('pay_stars'))
async def pay_stars(call: CallbackQuery, bot: Bot):
    content = f"""
–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>Stars</b> ‚≠ê–ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
–ó–∞–¥–∞–Ω–Ω—É—é —Ç–µ–ª–µ–≥—Ä–∞–º–º–æ–º, –¥–∞–ª–µ–µ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—á–µ—Ç –±–æ—Ç–∞, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!
    """
    await bot.edit_message_text(
        text=content,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=stars_keyboard()
    )


@router.callback_query(F.data.startswith('create_stars_invoice'))
async def pay_stars(call: CallbackQuery, bot: Bot):
    amount_stars = int(call.data.split(':')[1])
    amount_rubles = int(call.data.split(':')[2])
    prices = [LabeledPrice(label="XTR", amount=amount_stars)]
    await call.message.answer_invoice(
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞",
        description=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω–∞ {amount_stars} ‚≠ê - {amount_rubles} RUB",
        prices=prices,
        provider_token="",
        payload=f"{call.message.chat.id}:{amount_rubles}",
        currency="XTR",
        reply_markup=payment_keyboard_stars(amount_stars),
    )


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def on_successful_payment(message: types.Message):
    user_id = message.successful_payment.invoice_payload.split(":")[0]
    amount_rubles = message.successful_payment.invoice_payload.split(":")[1]

    if amount_rubles == '299':
        await update_subscription_status(message.chat.id, 'paid')
        await message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")
    else:
        new_balance = await manage_balance(int(user_id), round(int(amount_rubles) * 2), 'add')
        content = f"""
<b>–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ!</b>

–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç –Ω–∞ {amount_rubles} RUB
–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_balance} üíé
        """
        await message.answer(
            text=content,
            message_effect_id="5104841245755180586",
        )


# –•–µ–Ω–¥–ª–µ—Ä—ã –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data.startswith('pay_by_hand'))
async def pay_stars(call: CallbackQuery, bot: Bot):
    rub_amount = int(call.data.split(':')[1])
    content = f"""
üí∏ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üí¨ –ù–∞–ø–∏—Å–∞—Ç—å"</b> –¥–ª—è —Å–≤—è–∑–∏üëá
    """
    await bot.edit_message_text(
        text=content,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=contact_admin_keyboard(rub_amount)
    )

