from typing import Literal

import pymongo
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config

main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="üì∏ –°–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ"),
        KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    ],
    [
        KeyboardButton(text="üìπ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"),
        KeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"),
        KeyboardButton(text="üîí –ü–æ–¥–ø–∏—Å–∫–∞"),
    ],
], resize_keyboard=True, one_time_keyboard=False, selective=True)

earn_keyboard = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"),
    ],
    [
        KeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ"),
    ],
    [
        KeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ],
], resize_keyboard=True, one_time_keyboard=False, selective=True)


class Pagination1(CallbackData, prefix="pag"):
    action: str
    page: int
    max_photo_index: int
    index_type: Literal['photo_index', 'video_index']


def paginator1(page: int = 0, max_photo_index: int = 0,
               index_type: Literal['photo_index', 'video_index'] = 'video_index'):
    builder = InlineKeyboardBuilder()
    if index_type == 'photo_index':
        last_button = InlineKeyboardButton(text="–ö –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ",
                                           callback_data=f"navigate_last_bought_image:{max_photo_index}")
    else:
        last_button = InlineKeyboardButton(text="–ö –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–∏–¥–µ–æ",
                                           callback_data=f"navigate_last_bought_video:{max_photo_index}")

    builder.row(
        InlineKeyboardButton(text="üëà", callback_data=Pagination(action="prev1", page=page,
                                                                max_photo_index=max_photo_index,
                                                                index_type=index_type).pack()),
        InlineKeyboardButton(text="üëâ", callback_data=Pagination(action="next1", page=page,
                                                                max_photo_index=max_photo_index,
                                                                index_type=index_type).pack()),
        last_button,
        width=2
    )
    return builder.as_markup()


class Pagination(CallbackData, prefix="pag"):
    action: str
    page: int
    max_photo_index: int
    index_type: Literal['photo_index', 'video_index']


def paginator(page: int = 0, max_photo_index: int = 0,
              index_type: Literal['photo_index', 'video_index'] = 'photo_index'):
    builder = InlineKeyboardBuilder()
    if index_type == 'photo_index':
        last_button = InlineKeyboardButton(text="–ö –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ",
                                           callback_data=f"navigate_last_bought_image:{max_photo_index}")
    else:
        last_button = InlineKeyboardButton(text="–ö –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–∏–¥–µ–æ",
                                           callback_data=f"navigate_last_bought_video:{max_photo_index}")

    builder.row(
        InlineKeyboardButton(text="üëà", callback_data=Pagination(action="prev", page=page,
                                                                max_photo_index=max_photo_index,
                                                                index_type=index_type).pack()),
        InlineKeyboardButton(text="üëâ", callback_data=Pagination(action="next", page=page,
                                                                max_photo_index=max_photo_index,
                                                                index_type=index_type).pack()),
        last_button,
        width=2
    )
    return builder.as_markup()


def no_money_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="‚öúÔ∏è Premium –ø–æ–¥–ø–∏—Å–∫–∞", callback_data=f"premium_buy"),
        ],

        [
            InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data=f"invite_friends"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def subscribe(original_command: str, user_id: int, username: str):
    buttons = [
        [
            InlineKeyboardButton(text="‚öúÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=config.channel_link.get_secret_value()),
        ],
        [
            InlineKeyboardButton(text="üîíÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                                 callback_data=f"check_subscription:{original_command}:{user_id}:{username}"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
